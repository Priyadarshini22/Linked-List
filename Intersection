class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
class LinkedList:
    def __init__(self):
        self.head = None
    def push(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next is not None:
                current = current.next
            current.next = new_node
    def display(self):
        current = self.head
        while current:
            print(current.data, end = ' ')
            current = current.next
def intersect(llist1, llist2):
     if (llist1.head is None or llist2.head is None):
        return LinkedList()
 
     intersection = LinkedList()
     curr1 = llist1.head
     while curr1:
        curr2 = llist2.head
        data = curr1.data
        while curr2:
            if curr2.data == data:
                intersection.push(data)
                break
            curr2 = curr2.next
        curr1 = curr1.next
 
     return intersection
llist1 = LinkedList()
llist2 = LinkedList()
ll1=[int(x) for x in input().split()]
for data in ll1:
    llist1.push(data) 
ll2=[int(x) for x in input().split()]
for data in ll2:
    llist2.push(data)
result=intersect(llist1, llist2)
result.display()
