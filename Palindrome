class Node:  
    def __init__(self,data):  
        self.data = data;  
        self.next = None;  
          
class Palindrome:    
    def __init__(self):  
        self.head = None;  
        self.tail = None;  
        self.size = 0;   
    def addNode(self, data):    
        newNode = Node(data);  
        newNode.next=self.head
        self.head=newNode
    def reverseList(self, temp):  
        current = temp;  
        prevNode = None;  
        nextNode = None;   
        while(current != None):  
            nextNode = current.next;  
            current.next = prevNode;  
            prevNode = current;  
            current = nextNode;  
        return prevNode;  
    def isPalindrome(self):  
        current = self.head;  
        flag = True;  
        mid = (self.size//2) if(self.size%2 == 0) else ((self.size+1)//2);  
        for i in range(1, mid):  
            current = current.next; 
        revHead = self.reverseList(current.next);    
        while(self.head != None and revHead != None):  
            if(self.head.data != revHead.data):  
                flag = False;  
                break;  
            self.head = self.head.next;  
            revHead = revHead.next;  
        if(flag):  
            print("yes");  
        else:  
            print("no");   
sList = Palindrome();  
l=[x for x in input().split()]
for i in l:
  sList.addNode(i);    
sList.isPalindrome();
